(* Coursera Programming Languages, Homework 3, Provided Code *)

exception NoAnswer

datatype pattern = Wildcard
		 | Variable of string
		 | UnitP
		 | ConstP of int
		 | TupleP of pattern list
		 | ConstructorP of string * pattern

datatype valu = Const of int
	      | Unit
	      | Tuple of valu list
	      | Constructor of string * valu

fun g f1 f2 p =
    let 
	val r = g f1 f2 
    in
	case p of
	    Wildcard          => f1 ()
	  | Variable x        => f2 x
	  | TupleP ps         => List.foldl (fn (p,i) => (r p) + i) 0 ps
	  | ConstructorP(_,p) => r p
	  | _                 => 0
    end

(**** for the challenge problem only ****)

datatype typ = Anything
	     | UnitT
	     | IntT
	     | TupleT of typ list
	     | Datatype of string

(**** you can put all your code here ****)

fun only_capitals sl =
    List.filter (fn x => Char.isUpper(String.sub (x,0))) sl

fun longest_string1 sl =
    foldl (fn (x,y) => if String.size x > String.size y then x else y) "" sl

fun longest_string2 sl =
    foldl (fn (x,y) => if String.size x >= String.size y then x else y) "" sl

fun longest_string_helper f sl =
    foldl (fn (x,y) => if f (String.size x, String.size y) then x else y) "" sl

val longest_string3 = longest_string_helper (fn (x, y) => x > y)
                                            
val longest_string4 = longest_string_helper (fn (x, y) => x >= y)

val longest_capitalized = longest_string1 o only_capitals

fun rev_string s = (String.implode o List.rev o String.explode) s

fun first_answer f xs =
    case xs of
        [] => raise NoAnswer
      | x::xs' => case f x of
                      NONE => first_answer f xs'
                    | SOME x => x

fun all_answers f xs =
    let fun aux (xs,acc)=
            case xs of
                [] => SOME acc
              | x::xs' => case f x of
                              NONE => NONE
                            | SOME x => aux(xs', x@acc)
    in
        aux(xs, [])
    end
        
fun count_wildcards p = g (fn x => 1)  (fn x => 0) p
